{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP3rMgpWF4zNGz0zl9jTRWP",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JGounden/ITRI616---AI---Assignment-2/blob/main/ReinforcementLearning%20-%20FrozenLake-v1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import gym\n",
        "import numpy as np\n",
        "from gym.wrappers.monitoring.video_recorder import VideoRecorder\n",
        "from base64 import b64encode\n",
        "from IPython.display import HTML"
      ],
      "metadata": {
        "id": "1cdQo1Nlqgiz"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create environment\n",
        "env = gym.make(\"FrozenLake-v1\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s4ivob99qpbm",
        "outputId": "595fa61e-85fc-4698-d284-c09e35f4f3ba"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/gym/core.py:317: DeprecationWarning: \u001b[33mWARN: Initializing wrapper in old step API which returns one bool instead of two. It is recommended to set `new_step_api=True` to use new step API. This will be the default behaviour in future.\u001b[0m\n",
            "  deprecation(\n",
            "/usr/local/lib/python3.10/dist-packages/gym/wrappers/step_api_compatibility.py:39: DeprecationWarning: \u001b[33mWARN: Initializing environment in old step API which returns one bool instead of two. It is recommended to set `new_step_api=True` to use new step API. This will be the default behaviour in future.\u001b[0m\n",
            "  deprecation(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Reset environment\n",
        "env.reset()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hLRvM40LqsRs",
        "outputId": "d1204415-5751-4e22-9c3d-7d5a068eb006"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Sample 20 steps\n",
        "for i in range(20):\n",
        "    observation, reward, done, info = env.step(env.action_space.sample())\n",
        "    print(\"step\", i, observation, reward, done, info)\n",
        "\n",
        "env.close()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vt-EF_WGquiN",
        "outputId": "3edf76ae-d0d4-42cd-9907-fc2820d8bb0c"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "step 0 0 0.0 False {'prob': 0.3333333333333333}\n",
            "step 1 0 0.0 False {'prob': 0.3333333333333333}\n",
            "step 2 4 0.0 False {'prob': 0.3333333333333333}\n",
            "step 3 8 0.0 False {'prob': 0.3333333333333333}\n",
            "step 4 8 0.0 False {'prob': 0.3333333333333333}\n",
            "step 5 12 0.0 True {'prob': 0.3333333333333333, 'TimeLimit.truncated': False}\n",
            "step 6 12 0 True {'prob': 1.0, 'TimeLimit.truncated': False}\n",
            "step 7 12 0 True {'prob': 1.0, 'TimeLimit.truncated': False}\n",
            "step 8 12 0 True {'prob': 1.0, 'TimeLimit.truncated': False}\n",
            "step 9 12 0 True {'prob': 1.0, 'TimeLimit.truncated': False}\n",
            "step 10 12 0 True {'prob': 1.0, 'TimeLimit.truncated': False}\n",
            "step 11 12 0 True {'prob': 1.0, 'TimeLimit.truncated': False}\n",
            "step 12 12 0 True {'prob': 1.0, 'TimeLimit.truncated': False}\n",
            "step 13 12 0 True {'prob': 1.0, 'TimeLimit.truncated': False}\n",
            "step 14 12 0 True {'prob': 1.0, 'TimeLimit.truncated': False}\n",
            "step 15 12 0 True {'prob': 1.0, 'TimeLimit.truncated': False}\n",
            "step 16 12 0 True {'prob': 1.0, 'TimeLimit.truncated': False}\n",
            "step 17 12 0 True {'prob': 1.0, 'TimeLimit.truncated': False}\n",
            "step 18 12 0 True {'prob': 1.0, 'TimeLimit.truncated': False}\n",
            "step 19 12 0 True {'prob': 1.0, 'TimeLimit.truncated': False}\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/gym/utils/passive_env_checker.py:241: DeprecationWarning: `np.bool8` is a deprecated alias for `np.bool_`.  (Deprecated NumPy 1.24)\n",
            "  if not isinstance(terminated, (bool, np.bool8)):\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Install necessary packages\n",
        "!apt-get install -y xvfb x11-utils\n",
        "!pip install pyvirtualdisplay==0.2.*\n",
        "from pyvirtualdisplay import Display\n",
        "display = Display(visible=False, size=(1400, 900))\n",
        "_ = display.start()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LMFDCffQq0pF",
        "outputId": "e5041d11-79ef-493e-a63e-fa48cebb09e6"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Reading package lists... Done\n",
            "Building dependency tree... Done\n",
            "Reading state information... Done\n",
            "x11-utils is already the newest version (7.7+5build2).\n",
            "xvfb is already the newest version (2:21.1.4-2ubuntu1.7~22.04.8).\n",
            "0 upgraded, 0 newly installed, 0 to remove and 39 not upgraded.\n",
            "Requirement already satisfied: pyvirtualdisplay==0.2.* in /usr/local/lib/python3.10/dist-packages (0.2.5)\n",
            "Requirement already satisfied: EasyProcess in /usr/local/lib/python3.10/dist-packages (from pyvirtualdisplay==0.2.*) (1.1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Record video before training\n",
        "before_training = \"frozenlake_before_training.mp4\"\n",
        "video = VideoRecorder(env, before_training)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RVXLYmNbq6K4",
        "outputId": "0e34f549-0d84-4626-9bff-f1236d8175e1"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/gym/wrappers/monitoring/video_recorder.py:78: DeprecationWarning: \u001b[33mWARN: Recording ability for environment FrozenLake-v1 initialized with `render_mode=None` is marked as deprecated and will be removed in the future.\u001b[0m\n",
            "  logger.deprecation(\n",
            "/usr/local/lib/python3.10/dist-packages/gym/wrappers/monitoring/video_recorder.py:101: DeprecationWarning: \u001b[33mWARN: <class 'gym.wrappers.monitoring.video_recorder.VideoRecorder'> is marked as deprecated and will be removed in the future.\u001b[0m\n",
            "  logger.deprecation(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Reset environment\n",
        "env.reset()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jsUCH5tDq7S8",
        "outputId": "6b155a17-af31-4d06-fe30-3e9c550ce5b6"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Run random actions and record video\n",
        "for i in range(200):\n",
        "    env.render()\n",
        "    video.capture_frame()\n",
        "    observation, reward, done, info = env.step(env.action_space.sample())\n",
        "\n",
        "video.close()\n",
        "env.close()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qoFejHi6q9ZL",
        "outputId": "74b3f247-8443-4edf-a8c1-4fec39489d8a"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/gym/core.py:49: DeprecationWarning: \u001b[33mWARN: You are calling render method, but you didn't specified the argument render_mode at environment initialization. To maintain backward compatibility, the environment will render in human mode.\n",
            "If you want to render in human mode, initialize the environment in this way: gym.make('EnvName', render_mode='human') and don't call the render method.\n",
            "See here for more information: https://www.gymlibrary.ml/content/api/\u001b[0m\n",
            "  deprecation(\n",
            "/usr/local/lib/python3.10/dist-packages/gym/core.py:43: DeprecationWarning: \u001b[33mWARN: The argument mode in render method is deprecated; use render_mode during environment initialization instead.\n",
            "See here for more information: https://www.gymlibrary.ml/content/api/\u001b[0m\n",
            "  deprecation(\n",
            "/usr/local/lib/python3.10/dist-packages/gym/core.py:49: DeprecationWarning: \u001b[33mWARN: You are calling render method, but you didn't specified the argument render_mode at environment initialization. To maintain backward compatibility, the environment will render in human mode.\n",
            "If you want to render in human mode, initialize the environment in this way: gym.make('EnvName', render_mode='human') and don't call the render method.\n",
            "See here for more information: https://www.gymlibrary.ml/content/api/\u001b[0m\n",
            "  deprecation(\n",
            "/usr/local/lib/python3.10/dist-packages/gym/core.py:43: DeprecationWarning: \u001b[33mWARN: The argument mode in render method is deprecated; use render_mode during environment initialization instead.\n",
            "See here for more information: https://www.gymlibrary.ml/content/api/\u001b[0m\n",
            "  deprecation(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to render MP4\n",
        "def render_mp4(videopath: str) -> str:\n",
        "    mp4 = open(videopath, 'rb').read()\n",
        "    base64_encoded_mp4 = b64encode(mp4).decode()\n",
        "    return f'<video width=400 controls><source src=\"data:video/mp4;' \\\n",
        "           f'base64,{base64_encoded_mp4}\" type=\"video/mp4\"></video>'\n"
      ],
      "metadata": {
        "id": "dTXr4s_NrAEz"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "Dx4nNxGUmx94",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        },
        "outputId": "f210a426-0f43-4cc7-a4e5-1ed437c2dfb0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<video width=400 controls><source src=\"data:video/mp4;base64,\" type=\"video/mp4\"></video>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "\n",
        "# Display video\n",
        "html = render_mp4(before_training)\n",
        "HTML(html)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import gym\n",
        "import numpy as np\n",
        "from gym.wrappers.monitoring.video_recorder import VideoRecorder\n",
        "from base64 import b64encode\n",
        "from IPython.display import HTML\n",
        "\n",
        "# Create FrozenLake environment\n",
        "env = gym.make(\"FrozenLake-v1\")\n",
        "\n",
        "# Initialize Q-table with zeros\n",
        "action_space_size = env.action_space.n\n",
        "state_space_size = env.observation_space.n\n",
        "q_table = np.zeros((state_space_size, action_space_size))\n",
        "\n",
        "# Set hyperparameters\n",
        "num_episodes = 10000\n",
        "max_steps_per_episode = 100\n",
        "learning_rate = 0.1\n",
        "discount_rate = 0.99\n",
        "exploration_rate = 1\n",
        "max_exploration_rate = 1\n",
        "min_exploration_rate = 0.01\n",
        "exploration_decay_rate = 0.001\n",
        "\n",
        "# Q-learning algorithm\n",
        "for episode in range(num_episodes):\n",
        "    state = env.reset()\n",
        "    done = False\n",
        "\n",
        "    for step in range(max_steps_per_episode):\n",
        "        # Exploration-exploitation trade-off\n",
        "        exploration_threshold = np.random.uniform(0, 1)\n",
        "        if exploration_threshold > exploration_rate:\n",
        "            action = np.argmax(q_table[state, :])  # Exploitation\n",
        "        else:\n",
        "            action = env.action_space.sample()  # Exploration\n",
        "\n",
        "        # Take action and observe next state and reward\n",
        "        new_state, reward, done, _ = env.step(action)\n",
        "\n",
        "        # Update Q-table using Bellman equation\n",
        "        q_table[state, action] = q_table[state, action] * (1 - learning_rate) + \\\n",
        "                                  learning_rate * (reward + discount_rate * np.max(q_table[new_state, :]))\n",
        "\n",
        "        # Transition to next state\n",
        "        state = new_state\n",
        "\n",
        "        if done:\n",
        "            break\n",
        "\n",
        "    # Decay exploration rate\n",
        "    exploration_rate = min_exploration_rate + \\\n",
        "                        (max_exploration_rate - min_exploration_rate) * np.exp(-exploration_decay_rate * episode)\n",
        "\n",
        "    if (episode + 1) % 100 == 0:\n",
        "        print(f\"Episode {episode + 1}/{num_episodes}, Exploration rate: {exploration_rate}\")\n",
        "\n",
        "# Record video after training\n",
        "after_training = \"frozenlake_after_training.mp4\"\n",
        "video = VideoRecorder(env, after_training)\n",
        "\n",
        "state = env.reset()\n",
        "done = False\n",
        "while not done:\n",
        "    action = np.argmax(q_table[state, :])\n",
        "    state, _, done, _ = env.step(action)\n",
        "    video.capture_frame()\n",
        "\n",
        "video.close()\n",
        "env.close()\n",
        "\n",
        "# Function to render MP4\n",
        "def render_mp4(videopath: str) -> str:\n",
        "    mp4 = open(videopath, 'rb').read()\n",
        "    base64_encoded_mp4 = b64encode(mp4).decode()\n",
        "    return f'<video width=400 controls><source src=\"data:video/mp4;' \\\n",
        "           f'base64,{base64_encoded_mp4}\" type=\"video/mp4\"></video>'\n",
        "\n",
        "# Display video\n",
        "html = render_mp4(after_training)\n",
        "HTML(html)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "PV9dGYAWr3vp",
        "outputId": "981dbada-224d-4807-d0c8-c398f005fa13"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/gym/core.py:317: DeprecationWarning: \u001b[33mWARN: Initializing wrapper in old step API which returns one bool instead of two. It is recommended to set `new_step_api=True` to use new step API. This will be the default behaviour in future.\u001b[0m\n",
            "  deprecation(\n",
            "/usr/local/lib/python3.10/dist-packages/gym/wrappers/step_api_compatibility.py:39: DeprecationWarning: \u001b[33mWARN: Initializing environment in old step API which returns one bool instead of two. It is recommended to set `new_step_api=True` to use new step API. This will be the default behaviour in future.\u001b[0m\n",
            "  deprecation(\n",
            "/usr/local/lib/python3.10/dist-packages/gym/utils/passive_env_checker.py:241: DeprecationWarning: `np.bool8` is a deprecated alias for `np.bool_`.  (Deprecated NumPy 1.24)\n",
            "  if not isinstance(terminated, (bool, np.bool8)):\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Episode 100/10000, Exploration rate: 0.906685280943313\n",
            "Episode 200/10000, Exploration rate: 0.8213543943995963\n",
            "Episode 300/10000, Exploration rate: 0.7441438153406604\n",
            "Episode 400/10000, Exploration rate: 0.6742807943399114\n",
            "Episode 500/10000, Exploration rate: 0.6110661188014018\n",
            "Episode 600/10000, Exploration rate: 0.5538671150051557\n",
            "Episode 700/10000, Exploration rate: 0.5021113160959313\n",
            "Episode 800/10000, Exploration rate: 0.4552807326425205\n",
            "Episode 900/10000, Exploration rate: 0.4129066684254187\n",
            "Episode 1000/10000, Exploration rate: 0.3745650295675263\n",
            "Episode 1100/10000, Exploration rate: 0.33987208006008374\n",
            "Episode 1200/10000, Exploration rate: 0.3084806012037175\n",
            "Episode 1300/10000, Exploration rate: 0.2800764165269927\n",
            "Episode 1400/10000, Exploration rate: 0.2543752474026884\n",
            "Episode 1500/10000, Exploration rate: 0.23111986789174743\n",
            "Episode 1600/10000, Exploration rate: 0.21007753033962123\n",
            "Episode 1700/10000, Exploration rate: 0.19103763595951423\n",
            "Episode 1800/10000, Exploration rate: 0.17380962708894088\n",
            "Episode 1900/10000, Exploration rate: 0.15822108002459062\n",
            "Episode 2000/10000, Exploration rate: 0.14411597934795192\n",
            "Episode 2100/10000, Exploration rate: 0.13135315647056486\n",
            "Episode 2200/10000, Exploration rate: 0.11980487677133975\n",
            "Episode 2300/10000, Exploration rate: 0.10935556118553577\n",
            "Episode 2400/10000, Exploration rate: 0.09990062945063397\n",
            "Episode 2500/10000, Exploration rate: 0.09134545343191919\n",
            "Episode 2600/10000, Exploration rate: 0.08360441005230212\n",
            "Episode 2700/10000, Exploration rate: 0.07660002434778511\n",
            "Episode 2800/10000, Exploration rate: 0.07026219407198192\n",
            "Episode 2900/10000, Exploration rate: 0.06452748808927403\n",
            "Episode 3000/10000, Exploration rate: 0.059338511534685244\n",
            "Episode 3100/10000, Exploration rate: 0.054643331386782\n",
            "Episode 3200/10000, Exploration rate: 0.05039495670453954\n",
            "Episode 3300/10000, Exploration rate: 0.04655086832620994\n",
            "Episode 3400/10000, Exploration rate: 0.04307259332326014\n",
            "Episode 3500/10000, Exploration rate: 0.03992531995037202\n",
            "Episode 3600/10000, Exploration rate: 0.037077549237794605\n",
            "Episode 3700/10000, Exploration rate: 0.03450077973906763\n",
            "Episode 3800/10000, Exploration rate: 0.032169222278965716\n",
            "Episode 3900/10000, Exploration rate: 0.030059541846764605\n",
            "Episode 4000/10000, Exploration rate: 0.02815062405161077\n",
            "Episode 4100/10000, Exploration rate: 0.026423363802600873\n",
            "Episode 4200/10000, Exploration rate: 0.02486047409861062\n",
            "Episode 4300/10000, Exploration rate: 0.02344631301417708\n",
            "Episode 4400/10000, Exploration rate: 0.022166727149851316\n",
            "Episode 4500/10000, Exploration rate: 0.021008909980219474\n",
            "Episode 4600/10000, Exploration rate: 0.019961273681892093\n",
            "Episode 4700/10000, Exploration rate: 0.0190133331586728\n",
            "Episode 4800/10000, Exploration rate: 0.018155601103191393\n",
            "Episode 4900/10000, Exploration rate: 0.017379493044742927\n",
            "Episode 5000/10000, Exploration rate: 0.01667724143301951\n",
            "Episode 5100/10000, Exploration rate: 0.016041817897856102\n",
            "Episode 5200/10000, Exploration rate: 0.015466862906939568\n",
            "Episode 5300/10000, Exploration rate: 0.014946622117471758\n",
            "Episode 5400/10000, Exploration rate: 0.014475888784772717\n",
            "Episode 5500/10000, Exploration rate: 0.014049951651429853\n",
            "Episode 5600/10000, Exploration rate: 0.013664547795450259\n",
            "Episode 5700/10000, Exploration rate: 0.01331581996550458\n",
            "Episode 5800/10000, Exploration rate: 0.013000277976259248\n",
            "Episode 5900/10000, Exploration rate: 0.012714763777428573\n",
            "Episode 6000/10000, Exploration rate: 0.012456419846946017\n",
            "Episode 6100/10000, Exploration rate: 0.012222660591922922\n",
            "Episode 6200/10000, Exploration rate: 0.012011146471165815\n",
            "Episode 6300/10000, Exploration rate: 0.011819760580261806\n",
            "Episode 6400/10000, Exploration rate: 0.011646587464887713\n",
            "Episode 6500/10000, Exploration rate: 0.011489893950299375\n",
            "Episode 6600/10000, Exploration rate: 0.011348111795136282\n",
            "Episode 6700/10000, Exploration rate: 0.011219821995934937\n",
            "Episode 6800/10000, Exploration rate: 0.011103740585265238\n",
            "Episode 6900/10000, Exploration rate: 0.010998705781352897\n",
            "Episode 7000/10000, Exploration rate: 0.010903666360576941\n",
            "Episode 7100/10000, Exploration rate: 0.010817671136470391\n",
            "Episode 7200/10000, Exploration rate: 0.010739859439926398\n",
            "Episode 7300/10000, Exploration rate: 0.010669452505332534\n",
            "Episode 7400/10000, Exploration rate: 0.010605745676422794\n",
            "Episode 7500/10000, Exploration rate: 0.010548101353840846\n",
            "Episode 7600/10000, Exploration rate: 0.010495942613831365\n",
            "Episode 7700/10000, Exploration rate: 0.010448747434193177\n",
            "Episode 7800/10000, Exploration rate: 0.010406043469705617\n",
            "Episode 7900/10000, Exploration rate: 0.010367403324738792\n",
            "Episode 8000/10000, Exploration rate: 0.010332440275734477\n",
            "Episode 8100/10000, Exploration rate: 0.010300804400746747\n",
            "Episode 8200/10000, Exploration rate: 0.01027217907730554\n",
            "Episode 8300/10000, Exploration rate: 0.010246277813552555\n",
            "Episode 8400/10000, Exploration rate: 0.010222841380934435\n",
            "Episode 8500/10000, Exploration rate: 0.010201635219756281\n",
            "Episode 8600/10000, Exploration rate: 0.010182447091629387\n",
            "Episode 8700/10000, Exploration rate: 0.010165084955318105\n",
            "Episode 8800/10000, Exploration rate: 0.010149375044726615\n",
            "Episode 8900/10000, Exploration rate: 0.010135160129789437\n",
            "Episode 9000/10000, Exploration rate: 0.010122297942860079\n",
            "Episode 9100/10000, Exploration rate: 0.010110659754848624\n",
            "Episode 9200/10000, Exploration rate: 0.010100129086857722\n",
            "Episode 9300/10000, Exploration rate: 0.010090600544422639\n",
            "Episode 9400/10000, Exploration rate: 0.010081978762688033\n",
            "Episode 9500/10000, Exploration rate: 0.010074177451964423\n",
            "Episode 9600/10000, Exploration rate: 0.010067118534111973\n",
            "Episode 9700/10000, Exploration rate: 0.010060731361108237\n",
            "Episode 9800/10000, Exploration rate: 0.010054952007978986\n",
            "Episode 9900/10000, Exploration rate: 0.010049722633015597\n",
            "Episode 10000/10000, Exploration rate: 0.010044990898875783\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/gym/core.py:43: DeprecationWarning: \u001b[33mWARN: The argument mode in render method is deprecated; use render_mode during environment initialization instead.\n",
            "See here for more information: https://www.gymlibrary.ml/content/api/\u001b[0m\n",
            "  deprecation(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<video width=400 controls><source src=\"data:video/mp4;base64,\" type=\"video/mp4\"></video>"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    }
  ]
}